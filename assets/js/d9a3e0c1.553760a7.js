"use strict";(self.webpackChunkstas=self.webpackChunkstas||[]).push([[3611],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>d});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),o=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},m=function(n){var e=o(n.components);return r.createElement(c.Provider,{value:e},n.children)},p="mdxType",s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,c=n.parentName,m=u(n,["components","mdxType","originalType","parentName"]),p=o(t),f=i,d=p["".concat(c,".").concat(f)]||p[f]||s[f]||a;return t?r.createElement(d,l(l({ref:e},m),{},{components:t})):r.createElement(d,l({ref:e},m))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,l=new Array(a);l[0]=f;var u={};for(var c in e)hasOwnProperty.call(e,c)&&(u[c]=e[c]);u.originalType=n,u[p]="string"==typeof n?n:i,l[1]=u;for(var o=2;o<a;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9823:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>u,toc:()=>o});var r=t(7462),i=(t(7294),t(3905));const a={title:"\u51fd\u6570"},l="\u51fd\u6570",u={unversionedId:"electronics/c-lang/chapter8",id:"electronics/c-lang/chapter8",title:"\u51fd\u6570",description:"1. \u4ec0\u4e48\u662f\u51fd\u6570",source:"@site/docs/electronics/c-lang/chapter8.md",sourceDirName:"electronics/c-lang",slug:"/electronics/c-lang/chapter8",permalink:"/docs/electronics/c-lang/chapter8",draft:!1,tags:[],version:"current",frontMatter:{title:"\u51fd\u6570"},sidebar:"docs",previous:{title:"\u5faa\u73affor",permalink:"/docs/electronics/c-lang/chapter7"},next:{title:"\u51fd\u6570\u7684\u4f5c\u7528\u57df\u89c4\u5219",permalink:"/docs/electronics/c-lang/chapter9"}},c={},o=[{value:"1. \u4ec0\u4e48\u662f\u51fd\u6570",id:"1-\u4ec0\u4e48\u662f\u51fd\u6570",level:2},{value:"2. \u51fd\u6570\u58f0\u660e",id:"2-\u51fd\u6570\u58f0\u660e",level:2},{value:"3. \u5c0f\u6d4b\u8bd5",id:"3-\u5c0f\u6d4b\u8bd5",level:2}],m={toc:o},p="wrapper";function s(n){let{components:e,...t}=n;return(0,i.kt)(p,(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u51fd\u6570"},"\u51fd\u6570"),(0,i.kt)("h2",{id:"1-\u4ec0\u4e48\u662f\u51fd\u6570"},"1. \u4ec0\u4e48\u662f\u51fd\u6570"),(0,i.kt)("p",null,"\u51fd\u6570\u662f\u4e00\u7ec4\u4e00\u8d77\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u7684\u8bed\u53e5\u3002\u6bcf\u4e2a C \u7a0b\u5e8f\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5373\u4e3b\u51fd\u6570 main() \uff0c\u6240\u6709\u7b80\u5355\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u989d\u5916\u7684\u51fd\u6570\u3002"),(0,i.kt)("p",null,"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"return_type function_name( parameter list )\n{\n   body of the function\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u8fd4\u56de\u7c7b\u578b\uff1a\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u3002return_type \u662f\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7684\u6570\u636e\u7c7b\u578b\u3002\u6709\u4e9b\u51fd\u6570\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\u800c\u4e0d\u8fd4\u56de\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0creturn_type \u662f\u5173\u952e\u5b57 void\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u51fd\u6570\u540d\u79f0\uff1a\u8fd9\u662f\u51fd\u6570\u7684\u5b9e\u9645\u540d\u79f0\u3002\u51fd\u6570\u540d\u548c\u53d8\u91cf\u540d\u5177\u6709\u76f8\u540c\u7684\u547d\u540d\u89c4\u8303\uff0c\u7531\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u548c\u6570\u5b57\u7ec4\u6210\uff0c\u53ea\u80fd\u7531\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u5f00\u5934\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u53c2\u6570\uff1a\u53c2\u6570\u5c31\u50cf\u662f\u5360\u4f4d\u7b26\u3002\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u5411\u53c2\u6570\u4f20\u9012\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u88ab\u79f0\u4e3a\u5b9e\u9645\u53c2\u6570\u3002\u53c2\u6570\u5217\u8868\u5305\u62ec\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u3001\u987a\u5e8f\u3001\u6570\u91cf\u3002\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u51fd\u6570\u53ef\u80fd\u4e0d\u5305\u542b\u53c2\u6570\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u51fd\u6570\u4e3b\u4f53\uff1a\u51fd\u6570\u4e3b\u4f53\u5305\u542b\u4e00\u7ec4\u5b9a\u4e49\u51fd\u6570\u6267\u884c\u4efb\u52a1\u7684\u8bed\u53e5\u3002"))),(0,i.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u5c06\u6c42\u4e0a\u9762\u6c42\u8d28\u6570\u7684\u4f8b\u5b50\u8fdb\u884c\u51fd\u6570\u7684\u5c01\u88c5\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint isPrime(int num) {\n    int i = 2;\n    for (; i <= num; i++) {\n        //\u9047\u5230\u7b2c\u4e00\u4e2a\u56e0\u6570\u5219\u8df3\u51fa\u5faa\u73af\n        if (num % i == 0)\n            break;\n    }\n    //\u5982\u679c\u8be5\u56e0\u6570\u7b49\u4e8e\u8fd9\u4e2a\u6570\u672c\u8eab\u5219\u8868\u660e\u4e3a\u8d28\u6570\uff0c\u8fd4\u56de\u771f\n    if (i == num)\n        return 1;\n    else\n        return 0;\n}\n\nint main() {\n    for (int i = 2, count = 0; i <= 100; i++) {\n        if (isPrime(i)) {\n            printf("%-3d", i);\n            count++;\n            //\u5224\u65ad\u8d28\u6570\u7684\u4e2a\u6570\uff0c\u4e94\u4e2a\u8d28\u6570\u5c31\u6362\u884c\n            if (count % 5 == 0)\n                printf("\\n");\n        }\n    }\n    return 0;\n}\n')),(0,i.kt)("p",null,"\u8bf7\u5927\u5bb6\u5c1d\u8bd5\u5b8c\u6210\u6c42\u4e24\u4e2a\u6570\u4e2d\u6700\u5927\u516c\u7ea6\u6570\u7684\u51fd\u6570\u5c01\u88c5\u3002"),(0,i.kt)("p",null,"\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint getGCD(int num1, int num2) {\n    int min = num1;\n    if (num1 > num2)\n        min = num2;\n    for (int i = min; i > 0; i--) {\n        if (num1 % i == 0 && num2 % i == 0)\n            return i;\n    }\n}\n\nint main() {\n    int num1, num2;\n    printf("Input two intergers:");\n    scanf("%d %d", &num1, &num2);\n    printf("The greatest common divisor between %d and %d is %d.\\n",\n            num1, num2, getGCD(num1, num2));\n    return 0;\n}\n')),(0,i.kt)("h2",{id:"2-\u51fd\u6570\u58f0\u660e"},"2. \u51fd\u6570\u58f0\u660e"),(0,i.kt)("p",null,"\u51fd\u6570\u58f0\u660e\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u540d\u79f0\u53ca\u5982\u4f55\u8c03\u7528\u51fd\u6570\u3002\u4e00\u822c\u6211\u4eec\u90fd\u662f\u628a\u521b\u5efa\u7684\u51fd\u6570\u653e\u5728 main()\u4e4b\u524d\uff0c\u901a\u8fc7\u51fd\u6570\u58f0\u660e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u51fd\u6570\u4e3b\u4f53\u653e\u5728 main()\u4e4b\u540e\u3002"),(0,i.kt)("p",null,"\u51fd\u6570\u58f0\u660e\u7684\u683c\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"return_type function_name( parameter list );\n")),(0,i.kt)("p",null,"\u5728\u51fd\u6570\u58f0\u660e\u4e2d\uff0c\u53c2\u6570\u7684\u540d\u79f0\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u6709\u53c2\u6570\u7684\u7c7b\u578b\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u4e5f\u662f\u6709\u6548\u7684\u58f0\u660e\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int getGCD(int, int);\n")),(0,i.kt)("p",null,"\u9488\u5bf9\u4e0a\u9762\u6c42\u6700\u5927\u516c\u7ea6\u6570\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u51fd\u6570\u58f0\u660e\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint getGCD(int num1, int num2);\n// int getGCD(int, int);\n\nint main() {\n    int num1, num2;\n    printf("Input two intergers:");\n    scanf("%d %d", &num1, &num2);\n    printf("The greatest common divisor between %d and %d is %d.\\n",\n            num1, num2, getGCD(num1, num2));\n    return 0;\n}\n\nint getGCD(int num1, int num2) {\n    int min = num1;\n    if (num1 > num2)\n        min = num2;\n    for (int i = min; i > 0; i--) {\n        if (num1 % i == 0 && num2 % i == 0)\n            return i;\n    }\n}\n')),(0,i.kt)("h2",{id:"3-\u5c0f\u6d4b\u8bd5"},"3. \u5c0f\u6d4b\u8bd5"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u5c1d\u8bd5\u7f16\u5199\u901a\u8fc7\u51fd\u6570\u7684\u65b9\u5f0f\u6c42\u5706\u9762\u79ef\u7684\u7a0b\u5e8f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u6c42\u5176","\\","(x^2","\\",")\u7684\u7a0b\u5e8f"))))}s.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkstas=self.webpackChunkstas||[]).push([[1775],{3905:(n,t,e)=>{e.d(t,{Zo:()=>l,kt:()=>m});var i=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,i,r=function(n,t){if(null==n)return{};var e,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var d=i.createContext({}),_=function(n){var t=i.useContext(d),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},l=function(n){var t=_(n.components);return i.createElement(d.Provider,{value:t},n.children)},s="mdxType",p={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,d=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),s=_(e),u=r,m=s["".concat(d,".").concat(u)]||s[u]||p[u]||o;return e?i.createElement(m,a(a({ref:t},l),{},{components:e})):i.createElement(m,a({ref:t},l))}));function m(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,a=new Array(o);a[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=n,c[s]="string"==typeof n?n:r,a[1]=c;for(var _=2;_<o;_++)a[_]=e[_];return i.createElement.apply(null,a)}return i.createElement.apply(null,e)}u.displayName="MDXCreateElement"},8617:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>_});var i=e(7462),r=(e(7294),e(3905));const o={title:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},a="\u6574\u5408\u6253\u5305\u4ee3\u7801",c={unversionedId:"electronics/communication/parallel/chapter4",id:"electronics/communication/parallel/chapter4",title:"\u6574\u5408\u6253\u5305\u4ee3\u7801",description:"\u4e0b\u9762\u662f\u5b8c\u6574\u7684 LCD1602 8 \u603b\u7ebf\u7684\u4ee3\u7801\uff1a",source:"@site/docs/electronics/communication/parallel/chapter4.md",sourceDirName:"electronics/communication/parallel",slug:"/electronics/communication/parallel/chapter4",permalink:"/docs/electronics/communication/parallel/chapter4",draft:!1,tags:[],version:"current",frontMatter:{title:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},sidebar:"docs",previous:{title:"\u4ee3\u7801\u903b\u8f91\u5206\u6790",permalink:"/docs/electronics/communication/parallel/chapter3"},next:{title:"\u603b\u7ed3\u548c\u62d3\u5c55",permalink:"/docs/electronics/communication/parallel/chapter5"}},d={},_=[],l={toc:_},s="wrapper";function p(n){let{components:t,...e}=n;return(0,r.kt)(s,(0,i.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},"\u6574\u5408\u6253\u5305\u4ee3\u7801"),(0,r.kt)("p",null,"\u4e0b\u9762\u662f\u5b8c\u6574\u7684 LCD1602 8 \u603b\u7ebf\u7684\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define LCD_CLEAR 0x01\n#define LCD_HOME 0x02\n#define LCD_ENTRY_MODE 0x06\n#define LCD_SURSOR_SHIFT 0x18\n#define LCD_FUNCTION_SET 0x38\n#define LCD_SET_CGRAM_ADDR 0x40\n#define LCD_SET_DDRAM_ADDR 0x80\n\nuint8_t LCD_DISPLAY_CONTROL = 0x0C;\n\n//\u5b9a\u4e49LCD1602\u5f15\u811a\nconst uint8_t EN = 10, RW = 11, RS = 12;\nconst uint8_t data_pins[] = {9, 8, 7, 6, 5, 4, 3, 2};\n\nconst char* message = "Hello world!";\nuint8_t duck[] = {0x4, 0xe, 0xe, 0xe, 0x1f, 0x0, 0x4};\n\nvoid send_pins(uint8_t);\nuint8_t read_pins();\nvoid wait_ready();\nvoid write_cmd();\nvoid write_data();\nvoid lcd_init();\nvoid lcd_clear();\nvoid lcd_home();\nvoid display_off();\nvoid display_on();\nvoid cursor_off();\nvoid cursor_on();\nvoid blink_off();\nvoid blink_on();\nvoid scroll_left();\nvoid scroll_right();\nvoid set_cursor();\nvoid print(const char);\nvoid print(const char*);\nvoid creat_char(uint8_t, uint8_t*);\n\nvoid setup() {\n    lcd_init();\n    creat_char(0, duck);\n    set_cursor(0, 0);\n    print(message);\n    print(\'*\');\n    set_cursor(7, 1);\n    print("Have a nice day! By Mr.Addict!");\n    set_cursor(37, 1);\n    write_data(0);\n}\n\nvoid loop() {\n    scroll_left();\n    delay(1000);\n}\n\n// \u53d1\u9001\u6570\u636e\u5230\u5f15\u811a\nvoid send_pins(uint8_t dat) {\n    for (int i = 0; i < 8; i++) {\n        digitalWrite(data_pins[i], (dat >> i) & 0x01);\n    }\n}\n\n// \u8bfb\u53d6\u5f15\u811a\u6570\u636e\nuint8_t read_pins() {\n    uint8_t sta = 0;\n    for (uint8_t i = 0; i < 8; i++) {\n        sta |= (uint8_t)digitalRead(data_pins[i]) << i;\n    }\n    return sta;\n}\n\n// \u7b49\u5f85LCD1602\u51c6\u5907\u597d\nvoid wait_ready() {\n    uint8_t sta;\n    // \u8bfb\u53d6LCD\u72b6\u6001RS=0\uff0cRW=1\n    digitalWrite(RS, LOW);\n    digitalWrite(RW, HIGH);\n    // \u5c06\u5f15\u811a\u8bbe\u7f6e\u4e3a\u8f93\u5165\u6a21\u5f0f\n    for (uint8_t i = 0; i < 8; i++) {\n        pinMode(data_pins[i], INPUT);\n    }\n    // \u8bfb\u53d6\u5f15\u811a\u72b6\u6001\n    do {\n        digitalWrite(EN, HIGH);\n        sta = read_pins();\n        digitalWrite(EN, LOW);\n    } while (sta & 0x80);  // \u8bfb\u53d6Bit7\u7684Busy Flag\n    // \u5c06\u5f15\u811a\u91cd\u65b0\u8bbe\u7f6e\u4e3a\u8f93\u51fa\n    for (uint8_t i = 0; i < 8; i++) {\n        pinMode(data_pins[i], OUTPUT);\n    }\n}\n\n// \u5199\u547d\u4ee4\nvoid write_cmd(uint8_t cmd) {\n    wait_ready();\n    // \u5199\u547d\u4ee4RS=0\uff0cRW=0\n    digitalWrite(RS, LOW);\n    digitalWrite(RW, LOW);\n    send_pins(cmd);\n    // \u53d1\u9001\u547d\u4ee4\u9700\u8981EN\u9ad8\u8109\u51b2\n    digitalWrite(EN, HIGH);\n    digitalWrite(EN, LOW);\n}\n\n// \u5199\u6570\u636e\u5230DDRAM\nvoid write_data(uint8_t dat) {\n    wait_ready();\n    // \u5199\u6570\u636eRS=1\uff0cRW=0\n    digitalWrite(RS, HIGH);\n    digitalWrite(RW, LOW);\n    send_pins(dat);\n    // \u53d1\u9001\u6570\u636e\u9700\u8981EN\u9ad8\u8109\u51b2\n    digitalWrite(EN, HIGH);\n    digitalWrite(EN, LOW);\n}\n\n// LCD\u521d\u59cb\u5316\nvoid lcd_init() {\n    pinMode(EN, OUTPUT);\n    pinMode(RS, OUTPUT);\n    pinMode(RW, OUTPUT);\n\n    write_cmd(LCD_FUNCTION_SET);     // 8\u603b\u7ebf\uff0c2\u884c\u663e\u793a\u533a\u57df\uff0c5x8\u5b57\u4f53\n    write_cmd(LCD_DISPLAY_CONTROL);  // \u663e\u793a\u5f00\uff0c\u5149\u6807\u5173\uff0c\u95ea\u70c1\u5173\n    write_cmd(LCD_CLEAR);            // \u6e05\u5c4f\n    write_cmd(LCD_ENTRY_MODE);       // \u5730\u5740\u81ea\u52a8+1\uff0c\u6587\u5b57\u4e0d\u52a8\n}\n\n// \u6e05\u7a7a\u5c4f\u5e55\nvoid lcd_clear() {\n    write_cmd(LCD_CLEAR);\n}\n\n// \u5149\u6807\u4ee5\u53ca\u5149\u6807\u6307\u9488\u56de\u5230\u521d\u59cb\u72b6\u6001\nvoid lcd_home() {\n    write_cmd(LCD_HOME);\n}\n\n// \u5173\u95edLCD\nvoid display_off() {\n    LCD_DISPLAY_CONTROL &= ~0x04;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00LCD\nvoid display_on() {\n    LCD_DISPLAY_CONTROL |= 0x04;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5173\u95ed\u5149\u6807\nvoid cursor_off() {\n    LCD_DISPLAY_CONTROL &= ~0x02;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00\u5149\u6807\nvoid cursor_on() {\n    LCD_DISPLAY_CONTROL |= 0x02;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5173\u95ed\u5149\u6807\u95ea\u70c1\nvoid blink_off() {\n    LCD_DISPLAY_CONTROL &= ~0x01;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00\u5149\u6807\u95ea\u70c1\nvoid blink_on() {\n    LCD_DISPLAY_CONTROL |= 0x01;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5411\u5de6\u6eda\u52a8\u4e00\u5217\nvoid scroll_left() {\n    write_cmd(LCD_SURSOR_SHIFT);\n}\n\n// \u5411\u53f3\u6eda\u52a8\u4e00\u5217\nvoid scroll_right() {\n    write_cmd(LCD_SURSOR_SHIFT | 0x04);\n}\n\n// \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\nvoid set_cursor(uint8_t x, uint8_t y) {\n    uint8_t addr;\n    if (y == 0)\n        addr = 0x00 + x;  // \u7b2c\u4e00\u884c\u5b57\u7b26\u5730\u5740\u4ece 0x00\u5f00\u59cb\n    else\n        addr = 0x40 + x;  // \u7b2c\u4e8c\u884c\u5b57\u7b26\u5730\u5740\u4ece 0x40\u5f00\u59cb\n    write_cmd(LCD_SET_DDRAM_ADDR | addr);  // \u8bbe\u7f6eDDRAM\u5730\u5740\n}\n\n// \u6253\u5370\u5b57\u7b26\nvoid print(const char cha) {\n    write_data(cha);\n}\n\n// \u6253\u5370\u5b57\u7b26\u4e32\nvoid print(const char* str) {\n    while (*str) {\n        write_data(*str++);  // \u5148\u53d6\u6307\u9488\u7684\u503c\uff0c\u518d\u5c06\u6307\u9488\u5730\u5740\u81ea\u589e\n    }\n}\n\n// \u81ea\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684CGRAM\u5b57\u7b26\nvoid creat_char(uint8_t num, uint8_t* bit_map) {\n    // \u8bbe\u7f6eCGRAM\u5730\u5740\n    write_cmd(LCD_SET_CGRAM_ADDR + 8 * num);\n    for (uint8_t i = 0; i < 8; i++) {\n        write_data(bit_map[i]);\n    }\n}\n')))}p.isMDXComponent=!0}}]);
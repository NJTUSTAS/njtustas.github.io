"use strict";(self.webpackChunkstas=self.webpackChunkstas||[]).push([[2034],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>_});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=d(t),f=i,_=s["".concat(c,".").concat(f)]||s[f]||u[f]||a;return t?r.createElement(_,o(o({ref:n},p),{},{components:t})):r.createElement(_,o({ref:n},p))}));function _(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={title:"\u603b\u7ed3\u548c\u62d3\u5c55"},o="\u603b\u7ed3\u548c\u62d3\u5c55",l={unversionedId:"electronics/communication/serial/spi/chapter5",id:"electronics/communication/serial/spi/chapter5",title:"\u603b\u7ed3\u548c\u62d3\u5c55",description:"1.\u3000\u62d3\u5c55 1",source:"@site/docs/electronics/communication/serial/spi/chapter5.md",sourceDirName:"electronics/communication/serial/spi",slug:"/electronics/communication/serial/spi/chapter5",permalink:"/docs/electronics/communication/serial/spi/chapter5",draft:!1,tags:[],version:"current",frontMatter:{title:"\u603b\u7ed3\u548c\u62d3\u5c55"},sidebar:"docs",previous:{title:"\u6574\u5408\u6253\u5305\u4ee3\u7801",permalink:"/docs/electronics/communication/serial/spi/chapter4"},next:{title:"\u5e76\u884c\u901a\u4fe1\u7b80\u4ecb",permalink:"/docs/electronics/communication/parallel"}},c={},d=[{value:"1.\u3000\u62d3\u5c55 1",id:"1\u62d3\u5c55-1",level:2},{value:"2. \u62d3\u5c55 2",id:"2-\u62d3\u5c55-2",level:2}],p={toc:d},s="wrapper";function u(e){let{components:n,...a}=e;return(0,i.kt)(s,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u603b\u7ed3\u548c\u62d3\u5c55"},"\u603b\u7ed3\u548c\u62d3\u5c55"),(0,i.kt)("h2",{id:"1\u62d3\u5c55-1"},"1.\u3000\u62d3\u5c55 1"),(0,i.kt)("p",null,"\u6211\u4eec\u5728\u8fd9\u4e00\u7ae0\u53ea\u662f\u8bfb\u53d6 MPU9250 \u7684\u539f\u59cb\u6570\u636e\uff0c\u6ca1\u6709\u8bfb\u53d6\u5230\u7684\u8fdb\u884c\u52a0\u5de5\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u6211\u5bf9\u5982\u4f55\u4f7f\u7528 MPU9250 \u7684\u6570\u636e\u8fd8\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u4f46\u662f\uff0cMPU \u83b7\u53d6\u7684\u6570\u636e\uff0c\u4e00\u822c\u5c31\u662f\u7528\u6765\u505a",(0,i.kt)("strong",{parentName:"p"},"\u59ff\u6001\u89e3\u7b97"),"\uff0c\u901a\u8fc7\u9640\u87ba\u4eea\u7684\u6570\u636e\u83b7\u53d6\u5f53\u524d\u7684 MPU \u59ff\u6001\uff0c\u8ba1\u7b97\u51fa",(0,i.kt)("inlineCode",{parentName:"p"},"roll"),"\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"yaw"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"pitch"),"\u3002"),(0,i.kt)("p",null,"\u5176\u5b9e\u5728\u624b\u673a\u5185\u90e8\uff0c\u6e38\u620f\u624b\u67c4\uff0c\u65e0\u4eba\u673a\u7b49\u7b49\u90fd\u662f\u901a\u8fc7 MPU \u83b7\u53d6\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u59ff\u6001\u89e3\u7b97\u7684\u3002\u8fd9\u5c5e\u4e8e\u7b97\u6cd5\u8303\u7574\uff0c\u6d89\u53ca\u590d\u6742\u7684\u6570\u5b66\u63a8\u7406\u8fd0\u7b97\uff0c\u5728\u8fd9\u91cc\u6211\u5c31\u4e0d\u505a\u4ecb\u7ecd\uff0c\u6709\u80fd\u529b\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u76f8\u5173\u8d44\u6599\u8fdb\u884c\u5b66\u4e60\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u5c1d\u8bd5 MPU \u7684\u59ff\u6001\u89e3\u7b97\uff0c\u53ef\u4ee5\u4f7f\u7528",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jrowberg/i2cdevlib.git"},"Jrowberg \u7684 GitHub \u9879\u76ee"),"\uff0c\u91cc\u9762\u5305\u542b\u4e86\u5404\u4e2a\u5355\u7247\u673a\u5e73\u53f0\u7684 MPU \u5e93\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MPU6050",src:t(1064).Z,width:"1000",height:"562"})),(0,i.kt)("h2",{id:"2-\u62d3\u5c55-2"},"2. \u62d3\u5c55 2"),(0,i.kt)("p",null,"MPU9250 \u548c MPU6050 \u5728\u5bc4\u5b58\u5668\u4e0a\u51e0\u4e4e\u4e00\u81f4\uff0c\u53ea\u662f\u5b58\u5728\u4e9b\u5fae\u5dee\u522b\uff0c\u6bd4\u5982 ID \u7684\u9ed8\u8ba4\u503c\u4e0d\u540c\uff0c\u8ba1\u7b97\u6e29\u5ea6\u7684\u516c\u5f0f\u4e0d\u540c\u7b49\u7b49\u3002MPU9250 \u7684\u529f\u80fd\u4e5f\u8981\u6bd4 MPU6050 \u5f3a\u5927\u4e00\u4e9b\u3002MPU9250 \u662f 9 \u8f74\u7684\uff0c\u652f\u6301 SPI\uff1b\u800c MPU6050 \u662f 6 \u8f74\u7684\uff0c\u4e0d\u652f\u6301 SPI\u3002\u8fd9\u4e5f\u662f\u6211\u5728\u8fd9\u4e00\u7ae0\u4f7f\u7528 MPU9250 \u7684\u539f\u56e0\u3002"),(0,i.kt)("p",null,"\u4f46\u662f\u5462\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ea\u4f7f\u7528 I2C \u7684\u901a\u4fe1\u6a21\u5f0f\uff0c\u800c\u4e0d\u4f7f\u7528 SPI\u3002"),(0,i.kt)("p",null,"\u4e0b\u9762\u662f MPU9250 \u7684 I2C \u793a\u4f8b\u4ee3\u7801\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Wire.h>\n\n#define MPU_ADDR 0x68\n\n#define MPU_FSYNC_ADDR 0x1A\n#define MPU_GFS_ADDR 0x1B\n#define MPU_AFS_ADDR 0x1C\n#define MPU_EN_INT 0x38\n#define MPU_ACCEL_ADDR 0x3B\n#define MPU_GYRO_ADDR 0x43\n#define MPU_TEMP_ADDR 0x41\n#define MPU_FIFO_EN 0x6A\n#define MPU_RESET 0x6B\n#define MPU_ID_ADDR 0x75\n\nvoid write_data(uint8_t addr, uint8_t data);\nuint8_t read_data(uint8_t addr);\nvoid read_data(uint8_t addr, uint8_t* data, uint8_t length);\nbool MPU_init();\nfloat readTemp();\nvoid readRawAccel(int16_t* accel);\nvoid readRawGyro(int16_t* gyro);\n\nvoid setup() {\n    Serial.begin(115200);\n    if (MPU_init()) {\n        Serial.println("MPU init success!");\n    } else {\n        Serial.println("MPU init failed!");\n    }\n}\n\nvoid loop() {\n    int16_t accel[3], gyro[3];\n    readRawAccel(accel);\n    readRawGyro(gyro);\n\n    Serial.print("Accel X=");\n    Serial.print(accel[0]);\n    Serial.print(",Y=");\n    Serial.print(accel[1]);\n    Serial.print(",Z=");\n    Serial.println(accel[2]);\n\n    Serial.print("Gyro X=");\n    Serial.print(gyro[0]);\n    Serial.print(",Y=");\n    Serial.print(gyro[1]);\n    Serial.print(",Z=");\n    Serial.println(gyro[2]);\n\n    Serial.print("Temp=");\n    Serial.println(readTemp(), 2);\n    Serial.println();\n    delay(1000);\n}\n\nvoid write_data(uint8_t addr, uint8_t data) {\n    Wire.beginTransmission(MPU_ADDR);\n    Wire.write(addr);\n    Wire.write(data);\n    Wire.endTransmission();\n}\n\nuint8_t read_data(uint8_t addr) {\n    Wire.beginTransmission(MPU_ADDR);\n    Wire.write(addr);\n    Wire.endTransmission();\n    Wire.requestFrom(MPU_ADDR, 1);\n    return Wire.read();\n}\n\nvoid read_data(uint8_t addr, uint8_t* dest, uint8_t length) {\n    Wire.beginTransmission(MPU_ADDR);\n    Wire.write(addr);\n    Wire.endTransmission();\n    Wire.requestFrom(MPU_ADDR, length);\n    for (uint8_t i = 0; i < length; i++) {\n        dest[i] = Wire.read();\n    }\n}\n\nbool MPU_init() {\n    // \u521d\u59cb\u5316I2C\n    Wire.begin();\n    // \u8bbe\u7f6eI2C\u9891\u7387\u4e3a100KHz\n    Wire.setClock(100 * 1000);\n    // Wake up MPU from sleep mode\n    write_data(MPU_RESET, 0x00);\n    // Disable FIFO\n    write_data(MPU_FIFO_EN, 0x00);\n    // Disable FSYNC\n    write_data(MPU_FSYNC_ADDR, 0x00);\n    // Disable interupt\n    write_data(MPU_EN_INT, 0x00);\n    // Set Gyroscope full scable range to \xb1250\xb0/s\n    write_data(MPU_GFS_ADDR, 0x00);\n    // Set Accelerometer full scable range to \xb12g\n    write_data(MPU_AFS_ADDR, 0x00);\n    // Check ID\n    if (read_data(MPU_ID_ADDR) == 0x71)\n        return true;\n    else\n        return false;\n}\n\nvoid readRawAccel(int16_t* accel) {\n    uint8_t buffer[6];\n    read_data(MPU_ACCEL_ADDR, buffer, 6);\n    for (uint8_t i = 0; i < 3; i++) {\n        accel[i] = buffer[i * 2] << 8 | buffer[i * 2 + 1];  // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    }\n}\n\nvoid readRawGyro(int16_t* gyro) {\n    uint8_t buffer[6];\n    read_data(MPU_GYRO_ADDR, buffer, 6);\n    for (uint8_t i = 0; i < 3; i++) {\n        gyro[i] = buffer[i * 2] << 8 | buffer[i * 2 + 1];   // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    }\n}\n\nfloat readTemp() {\n    int16_t temp;\n    uint8_t buffer[2];\n    read_data(MPU_TEMP_ADDR, buffer, 2);\n    temp = buffer[0] << 8 | buffer[1];  // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    return (temp / 321.0 + 21); // \u6e29\u5ea6\u8ba1\u7b97\u516c\u5f0f\uff1aTEMP_degC = TEMP_OUT/321.0 +21\n}\n')))}u.isMDXComponent=!0},1064:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-1-00eddaa9f817b7332c383d75d25e4241.png"}}]);
"use strict";(self.webpackChunkstas=self.webpackChunkstas||[]).push([[8820],{3905:(n,e,t)=>{t.d(e,{Zo:()=>_,kt:()=>m});var i=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var d=i.createContext({}),l=function(n){var e=i.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},_=function(n){var e=l(n.components);return i.createElement(d.Provider,{value:e},n.children)},s="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},u=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,d=n.parentName,_=a(n,["components","mdxType","originalType","parentName"]),s=l(t),u=r,m=s["".concat(d,".").concat(u)]||s[u]||p[u]||o;return t?i.createElement(m,c(c({ref:e},_),{},{components:t})):i.createElement(m,c({ref:e},_))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,c=new Array(o);c[0]=u;var a={};for(var d in e)hasOwnProperty.call(e,d)&&(a[d]=e[d]);a.originalType=n,a[s]="string"==typeof n?n:r,c[1]=a;for(var l=2;l<o;l++)c[l]=t[l];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5074:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(7462),r=(t(7294),t(3905));const o={title:"\u603b\u7ed3\u548c\u62d3\u5c55"},c="\u603b\u7ed3\u548c\u62d3\u5c55",a={unversionedId:"electronics/communication/parallel/chapter5",id:"electronics/communication/parallel/chapter5",title:"\u603b\u7ed3\u548c\u62d3\u5c55",description:"1. \u603b\u7ed3",source:"@site/docs/electronics/communication/parallel/chapter5.md",sourceDirName:"electronics/communication/parallel",slug:"/electronics/communication/parallel/chapter5",permalink:"/docs/electronics/communication/parallel/chapter5",draft:!1,tags:[],version:"current",frontMatter:{title:"\u603b\u7ed3\u548c\u62d3\u5c55"},sidebar:"docs",previous:{title:"\u6574\u5408\u6253\u5305\u4ee3\u7801",permalink:"/docs/electronics/communication/parallel/chapter4"},next:{title:"\u9879\u76ee\u5236\u4f5c\u7b80\u4ecb",permalink:"/docs/electronics/projects"}},d={},l=[{value:"1. \u603b\u7ed3",id:"1-\u603b\u7ed3",level:2},{value:"2. \u62d3\u5c55",id:"2-\u62d3\u5c55",level:2}],_={toc:l},s="wrapper";function p(n){let{components:e,...t}=n;return(0,r.kt)(s,(0,i.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u603b\u7ed3\u548c\u62d3\u5c55"},"\u603b\u7ed3\u548c\u62d3\u5c55"),(0,r.kt)("h2",{id:"1-\u603b\u7ed3"},"1. \u603b\u7ed3"),(0,r.kt)("p",null,"\u603b\u5f97\u6765\u8bf4\uff0cLCD1602 \u7684\u901a\u4fe1\u65b9\u5f0f\u5176\u5b9e\u548c\u524d\u9762\u6240\u8bb2\u7684\u5176\u4ed6\u65b9\u5f0f\u6ca1\u6709\u5f88\u5927\u7684\u5dee\u522b\uff0c\u540c\u6837\u9700\u8981\u5b8c\u6210\u6570\u636e\u547d\u4ee4\u7684\u8bfb\u5199\uff0c\u9700\u8981\u5bf9\u5bc4\u5b58\u5668\u8fdb\u884c\u914d\u7f6e\u7b49\u7b49\u3002\u53ea\u662f\u5c06\u4e32\u884c\u901a\u4fe1\u53d8\u6210\u4e86\u5e76\u884c\u7f62\u4e86\u3002"),(0,r.kt)("p",null,"\u56de\u5934\u6765\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u5728\u6574\u4e2a\u64cd\u4f5c\u4e2d\u6211\u4eec\u552f\u4e00\u7684\u8bfb\u64cd\u4f5c\u5c31\u662f\u8bfb\u53d6 Flag\u3002\u5176\u5b9e\uff0c\u4e00\u822c\u663e\u793a\u7684\u8bbe\u5907\u90fd\u662f\u4e0d\u9700\u8981\u8bfb\u64cd\u4f5c\u7684\uff0c\u50cf OLED\uff0cTFT \u7b49\u7b49\u3002\u90a3\u6211\u4eec\u9009\u62e9\u589e\u52a0\u4e00\u4e2a\u5f15\u811a\u7684\u610f\u4e49\u53c8\u5728\u54ea\u91cc\u5462\u3002\u5176\u5b9e\u8fd9\u4e48\u505a\u4e0d\u4ec5\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff0c\u800c\u4e14\u80fd\u591f",(0,r.kt)("strong",{parentName:"p"},"\u5927\u5927\u63d0\u9ad8\u6548\u7387"),"\u3002\u4e8b\u5b9e\u4e0a\uff0cArduino \u7684\u5b98\u65b9 LCD1602 \u5e93",(0,r.kt)("inlineCode",{parentName:"p"},"LiquidCrystal.h"),"\u5c31\u662f\u4f7f\u7528\u89e3\u6790\u65f6\u95f4\u4ee3\u66ff\u8bfb\u53d6 Flag\uff0c\u90a3\u662f\u4e3a\u4e86\u517c\u5bb9 4 \u603b\u7ebf\u7684\u63a5\u53e3\u6a21\u5f0f\u3002"),(0,r.kt)("h2",{id:"2-\u62d3\u5c55"},"2. \u62d3\u5c55"),(0,r.kt)("p",null,"\u524d\u9762\u6211\u4eec\u662f\u4ecb\u7ecd LCD \u7684 8 \u603b\u7ebf\u6a21\u5f0f\uff0c\u90a3\u4e48 LCD \u7684 4 \u603b\u7ebf\u6a21\u5f0f\u5982\u4f55\u4f7f\u7528\u5462\u3002"),(0,r.kt)("p",null,"\u5176\u5b9e\u4f7f\u7528 4 \u603b\u7ebf\u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u5982\u679c\u901a\u8fc7\u89e3\u6790\u65f6\u95f4\u4ee3\u66ff Flag\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u8282\u7701 4 \u4e2a DB\uff0c\u8fd8\u53ef\u4ee5\u7701\u4e0b RW\u3002\u4e5f\u5c31\u662f\u8bf4\u53ea\u5bf9 LCD1602 \u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u4e0d\u8fdb\u884c\u8bfb\u64cd\u4f5c\u3002"),(0,r.kt)("p",null,"\u53ea\u662f\u5462\uff0c\u8fdb\u5165 4 \u603b\u7ebf\u6a21\u5f0f\u5c31\u9700\u8981\u5bf9 LCD1602 \u8fdb\u884c\u914d\u7f6e\uff0c\u540c\u65f6\u53d1\u9001\u6570\u636e\u4e5f\u8981\u5206\u4e24\u6b21\u53d1\u9001\uff0c\u76f8\u5bf9\u6765\u8bf4\u5c31\u8981\u590d\u6742\u4e00\u4e9b\u3002"),(0,r.kt)("p",null,"\u4e0b\u9762\u662f\u6211\u7684\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define LCD_CLEAR 0x01\n#define LCD_HOME 0x02\n#define LCD_ENTRY_MODE 0x06\n#define LCD_SURSOR_SHIFT 0x18\n#define LCD_FUNCTION_SET 0x28\n#define LCD_SET_CGRAM_ADDR 0x40\n#define LCD_SET_DDRAM_ADDR 0x80\n\nuint8_t LCD_DISPLAY_CONTROL = 0x0C;\n\nconst uint8_t EN = 8, RS = 9;\nuint8_t data_pins[] = {7, 6, 5, 4};\n\nconst char* message = "Hello world!";\nuint8_t bell[8] = {0x4, 0xe, 0xe, 0xe, 0x1f, 0x0, 0x4};\n\nvoid send_pins(uint8_t);\nvoid write_cmd(uint8_t);\nvoid write_data(uint8_t);\nvoid lcd_init();\nvoid lcd_clear();\nvoid lcd_home();\nvoid display_off();\nvoid display_on();\nvoid cursor_off();\nvoid cursor_on();\nvoid blink_off();\nvoid blink_on();\nvoid scroll_left();\nvoid scroll_right();\nvoid set_cursor();\nvoid print(const char);\nvoid print(const char*);\nvoid creat_char(uint8_t, uint8_t*);\n\nvoid setup() {\n    lcd_init();\n    creat_char(0, bell);\n    set_cursor(0, 0);\n    print(message);\n    print(\'*\');\n    set_cursor(7, 1);\n    print("Have a nice day! By Mr.Addict!");\n    set_cursor(37, 1);\n    write_data(0);\n}\n\nvoid loop() {\n    scroll_left();\n    delay(1000);\n}\n\n// \u53d1\u9001\u6570\u636e\u5230\u5f15\u811a\nvoid send_pins(uint8_t dat) {\n    for (int i = 0; i < 4; i++) {\n        digitalWrite(data_pins[i], (dat >> i) & 0x01);\n    }\n    digitalWrite(EN, HIGH);\n    digitalWrite(EN, LOW);\n    delayMicroseconds(50);\n}\n\n// \u5199\u547d\u4ee4\nvoid write_cmd(uint8_t cmd) {\n    // \u547d\u4ee4RS=0\uff0cRW=0\n    digitalWrite(RS, LOW);\n    // \u9ad8\u56db\u4f4d\n    send_pins(cmd >> 4);\n    // \u4f4e\u56db\u4f4d\n    send_pins(cmd);\n}\n\n// \u5199\u6570\u636e\u5230DDRAM\nvoid write_data(uint8_t dat) {\n    // \u6570\u636eRS=1\uff0cRW=0\n    digitalWrite(RS, HIGH);\n    // \u9ad8\u56db\u4f4d\n    send_pins(dat >> 4);\n    // \u4f4e\u56db\u4f4d\n    send_pins(dat);\n}\n\n// LCD\u521d\u59cb\u5316\nvoid lcd_init() {\n    for (uint8_t i = 0; i < 4; i++) {\n        pinMode(data_pins[i], OUTPUT);\n    }\n    pinMode(EN, OUTPUT);\n    pinMode(RS, OUTPUT);\n\n    delay(15);\n    for (uint8_t i = 0; i < 3; i++) {\n        send_pins(0x03);\n        delayMicroseconds(4200);\n    }\n    send_pins(0x02);  // \u8bbe\u7f6e4\u603b\u7ebf\u6a21\u5f0f\n\n    write_cmd(LCD_FUNCTION_SET);     // 4\u603b\u7ebf\uff0c2\u884c\u663e\u793a\u533a\u57df\uff0c5x8\u5b57\u4f53\n    write_cmd(LCD_DISPLAY_CONTROL);  // \u663e\u793a\u5f00\uff0c\u5149\u6807\u5173\uff0c\u95ea\u70c1\u5173\n    lcd_clear();                     // \u6e05\u5c4f\n    write_cmd(LCD_ENTRY_MODE);       // \u5730\u5740\u81ea\u52a8+1\uff0c\u6587\u5b57\u4e0d\u52a8\n}\n\n// \u6e05\u7a7a\u5c4f\u5e55\nvoid lcd_clear() {\n    write_cmd(LCD_CLEAR);\n    delayMicroseconds(1600);  // \u8be5\u6307\u4ee4\u9700\u8981\u82b1\u8f83\u957f\u65f6\u95f4\n}\n\n// \u5149\u6807\u4ee5\u53ca\u5149\u6807\u6307\u9488\u56de\u5230\u521d\u59cb\u72b6\u6001\nvoid lcd_home() {\n    write_cmd(LCD_HOME);\n    delayMicroseconds(1600);  // \u8be5\u6307\u4ee4\u9700\u8981\u82b1\u8f83\u957f\u65f6\u95f4\n}\n\n// \u5173\u95ed\u5c4f\u5e55\nvoid display_off() {\n    LCD_DISPLAY_CONTROL &= 0x04;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00\u5c4f\u5e55\nvoid display_on() {\n    LCD_DISPLAY_CONTROL |= 0x04;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5173\u95ed\u5149\u6807\nvoid cursor_off() {\n    LCD_DISPLAY_CONTROL &= ~0x02;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00\u5149\u6807\nvoid cursor_on() {\n    LCD_DISPLAY_CONTROL |= 0x02;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5173\u95ed\u5149\u6807\u95ea\u70c1\nvoid blink_off() {\n    LCD_DISPLAY_CONTROL &= ~0x01;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u6253\u5f00\u5149\u6807\u95ea\u70c1\nvoid blink_on() {\n    LCD_DISPLAY_CONTROL |= 0x01;\n    write_cmd(LCD_DISPLAY_CONTROL);\n}\n\n// \u5411\u5de6\u6eda\u52a8\u4e00\u5217\nvoid scroll_left() {\n    write_cmd(LCD_SURSOR_SHIFT);\n}\n\n// \u5411\u53f3\u6eda\u52a8\u4e00\u5217\nvoid scroll_right() {\n    write_cmd(LCD_SURSOR_SHIFT | 0x04);\n}\n\n// \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\nvoid set_cursor(uint8_t x, uint8_t y) {\n    uint8_t addr;\n    if (y == 0)\n        addr = 0x00 + x;  // \u7b2c\u4e00\u884c\u5b57\u7b26\u5730\u5740\u4ece 0x00\u5f00\u59cb\n    else\n        addr = 0x40 + x;  // \u7b2c\u4e8c\u884c\u5b57\u7b26\u5730\u5740\u4ece 0x40\u5f00\u59cb\n    write_cmd(addr | LCD_SET_DDRAM_ADDR);  // \u8bbe\u7f6eDDRAM\u5730\u5740\n}\n\n// \u6253\u5370\u5b57\u7b26\nvoid print(const char cha) {\n    write_data(cha);\n}\n\n// \u6253\u5370\u5b57\u7b26\u4e32\nvoid print(const char* str) {\n    while (*str) {\n        write_data(*str++);  // \u5148\u53d6\u6307\u9488\u7684\u503c\uff0c\u518d\u5c06\u6307\u9488\u5730\u5740\u81ea\u589e\n    }\n}\n\n// \u81ea\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684CGRAM\u5b57\u7b26\nvoid creat_char(uint8_t num, uint8_t* bit_map) {\n    // \u8bbe\u7f6eCGRAM\u5730\u5740\n    write_cmd(LCD_SET_CGRAM_ADDR + 8 * num);\n    for (uint8_t i = 0; i < 8; i++) {\n        write_data(bit_map[i]);\n    }\n}\n')))}p.isMDXComponent=!0}}]);
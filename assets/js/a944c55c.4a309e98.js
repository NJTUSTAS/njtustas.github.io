"use strict";(self.webpackChunkstas=self.webpackChunkstas||[]).push([[9494],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>_});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),d=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=d(n.components);return r.createElement(l.Provider,{value:e},n.children)},p="mdxType",s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),p=d(t),f=i,_=p["".concat(l,".").concat(f)]||p[f]||s[f]||a;return t?r.createElement(_,o(o({ref:e},u),{},{components:t})):r.createElement(_,o({ref:e},u))}));function _(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c[p]="string"==typeof n?n:i,o[1]=c;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6886:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={title:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},o="\u6574\u5408\u6253\u5305\u4ee3\u7801",c={unversionedId:"electronics/communication/serial/spi/chapter4",id:"electronics/communication/serial/spi/chapter4",title:"\u6574\u5408\u6253\u5305\u4ee3\u7801",description:"\u4e0b\u9762\u662f\u5b8c\u6574\u7684 MPU9250 SPI \u901a\u4fe1\u4ee3\u7801\uff1a",source:"@site/docs/electronics/communication/serial/spi/chapter4.md",sourceDirName:"electronics/communication/serial/spi",slug:"/electronics/communication/serial/spi/chapter4",permalink:"/docs/electronics/communication/serial/spi/chapter4",draft:!1,tags:[],version:"current",frontMatter:{title:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},sidebar:"docs",previous:{title:"\u4ee3\u7801\u903b\u8f91\u5206\u6790",permalink:"/docs/electronics/communication/serial/spi/chapter3"},next:{title:"\u603b\u7ed3\u548c\u62d3\u5c55",permalink:"/docs/electronics/communication/serial/spi/chapter5"}},l={},d=[],u={toc:d},p="wrapper";function s(n){let{components:e,...t}=n;return(0,i.kt)(p,(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6574\u5408\u6253\u5305\u4ee3\u7801"},"\u6574\u5408\u6253\u5305\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e0b\u9762\u662f\u5b8c\u6574\u7684 MPU9250 SPI \u901a\u4fe1\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n\n#define MPU_FSYNC_ADDR 0x1A\n#define MPU_GFS_ADDR 0x1B\n#define MPU_AFS_ADDR 0x1C\n#define MPU_EN_INT 0x38\n#define MPU_ACCEL_ADDR 0x3B\n#define MPU_GYRO_ADDR 0x43\n#define MPU_TEMP_ADDR 0x41\n#define MPU_FIFO_EN 0x6A\n#define MPU_RESET 0x6B\n#define MPU_ID_ADDR 0x75\n\n#define MPU_SPI_WRITE 0x00\n#define MPU_SPI_READ 0x80\n\n#define CS 10\n\nvoid write_data(uint8_t addr, uint8_t data);\nuint8_t read_data(uint8_t addr);\nvoid read_data(uint8_t addr, uint8_t* data, uint8_t length);\nbool MPU_init();\nfloat readTemp();\nvoid readRawAccel(int16_t* accel);\nvoid readRawGyro(int16_t* gyro);\n\nvoid setup() {\n    Serial.begin(115200);\n    if (MPU_init()) {\n        Serial.println("MPU init success!");\n    } else {\n        Serial.println("MPU init failed!");\n    }\n    Serial.println();\n}\n\nvoid loop() {\n    int16_t accel[3], gyro[3];\n    readRawAccel(accel);\n    readRawGyro(gyro);\n\n    Serial.print("Accel X=");\n    Serial.print(accel[0]);\n    Serial.print(",Y=");\n    Serial.print(accel[1]);\n    Serial.print(",Z=");\n    Serial.println(accel[2]);\n\n    Serial.print("Gyro X=");\n    Serial.print(gyro[0]);\n    Serial.print(",Y=");\n    Serial.print(gyro[1]);\n    Serial.print(",Z=");\n    Serial.println(gyro[2]);\n\n    Serial.print("Temp=");\n    Serial.println(readTemp(), 2);\n    Serial.println();\n    delay(1000);\n}\n\nvoid write_data(uint8_t addr, uint8_t data) {\n    // \u8bbe\u7f6eMPU9250\u6700\u5927\u7684\u65f6\u949f\u9891\u73871MHz\uff0c\u9ad8\u4f4d\u5728\u524d\uff0c\u6a21\u5f0f0\n    SPI.beginTransaction(SPISettings(1000 * 1000, MSBFIRST, SPI_MODE0));\n    digitalWrite(CS, LOW);\n    SPI.transfer(addr | MPU_SPI_WRITE);\n    SPI.transfer(data);\n    digitalWrite(CS, HIGH);\n    SPI.endTransaction();\n}\n\nuint8_t read_data(uint8_t addr) {\n    uint8_t data;\n    // \u8bbe\u7f6eMPU9250\u6700\u5927\u7684\u65f6\u949f\u9891\u73871MHz\uff0c\u9ad8\u4f4d\u5728\u524d\uff0c\u6a21\u5f0f0\n    SPI.beginTransaction(SPISettings(1000 * 1000, MSBFIRST, SPI_MODE0));\n    digitalWrite(CS, LOW);\n    SPI.transfer(addr | MPU_SPI_READ);\n    data = SPI.transfer(0xFF);\n    digitalWrite(CS, HIGH);\n    SPI.endTransaction();\n    return data;\n}\n\nvoid read_data(uint8_t addr, uint8_t* data, uint8_t length) {\n    // \u8bbe\u7f6eMPU9250\u6700\u5927\u7684\u65f6\u949f\u9891\u73871MHz\uff0c\u9ad8\u4f4d\u5728\u524d\uff0c\u6a21\u5f0f0\n    SPI.beginTransaction(SPISettings(1000 * 1000, MSBFIRST, SPI_MODE0));\n    digitalWrite(CS, LOW);\n    SPI.transfer(addr | MPU_SPI_READ);\n    for (uint8_t i = 0; i < length; i++) {\n        data[i] = SPI.transfer(0xFF);\n    }\n    digitalWrite(CS, HIGH);\n    SPI.endTransaction();\n}\n\nbool MPU_init() {\n    pinMode(CS, OUTPUT);\n    // \u521d\u59cb\u5316SPI\n    SPI.begin();\n    // Wake up MPU\n    write_data(MPU_RESET, 0x00);\n    // Disable FIFO\uff0cDisable I2C\n    write_data(MPU_FIFO_EN, 0x10);\n    // Disable FSYNC\n    write_data(MPU_FSYNC_ADDR, 0x00);\n    // Disable interupt\n    write_data(MPU_EN_INT, 0x00);\n    // Set Gyroscope full scable range to \xb1250\xb0/s\n    write_data(MPU_GFS_ADDR, 0x00);\n    // Set Accelerometer full scable range to \xb12g\n    write_data(MPU_AFS_ADDR, 0x00);\n    // Check ID, dafaule value is 0x71\n    if (read_data(MPU_ID_ADDR) == 0x71)\n        return true;\n    else\n        return false;\n}\n\nvoid readRawAccel(int16_t* accel) {\n    uint8_t buffer[6];\n    read_data(MPU_ACCEL_ADDR, buffer, 6);\n    for (uint8_t i = 0; i < 3; i++) {\n        accel[i] = buffer[i * 2] << 8 | buffer[i * 2 + 1];  // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    }\n}\n\nvoid readRawGyro(int16_t* gyro) {\n    uint8_t buffer[6];\n    read_data(MPU_GYRO_ADDR, buffer, 6);\n    for (uint8_t i = 0; i < 3; i++) {\n        gyro[i] = buffer[i * 2] << 8 | buffer[i * 2 + 1];   // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    }\n}\n\nfloat readTemp() {\n    int16_t temp;\n    uint8_t buffer[2];\n    read_data(MPU_TEMP_ADDR, buffer, 2);\n    temp = buffer[0] << 8 | buffer[1];  // \u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u9ad8\u4f4d\uff0c\u7b2c\u4e8c\u5b57\u8282\u662f\u4f4e\u4f4d\n    return (temp / 321.0 + 21); // \u6e29\u5ea6\u8ba1\u7b97\u516c\u5f0f\uff1aTEMP_degC = TEMP_OUT/321.0 +21\n}\n')))}s.isMDXComponent=!0}}]);